// Code generated by goa v3.1.1, DO NOT EDIT.
//
// blog HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sm43/goa-crud/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	blog "github.com/sm43/goa-crud/gen/blog"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the blog create endpoint from CLI
// flags.
func BuildCreatePayload(blogCreateBody string, blogCreateAuth string) (*blog.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(blogCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"blog\": {\n         \"comments\": [\n            {\n               \"comment\": \"Iure velit.\",\n               \"id\": 8779553980399303872\n            },\n            {\n               \"comment\": \"Iure velit.\",\n               \"id\": 8779553980399303872\n            },\n            {\n               \"comment\": \"Iure velit.\",\n               \"id\": 8779553980399303872\n            }\n         ],\n         \"name\": \"Nihil consequatur sunt asperiores.\"\n      }\n   }'")
		}
		if body.Blog == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("blog", "body"))
		}
		if body.Blog != nil {
			if err2 := ValidateBlogRequestBody(body.Blog); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var auth string
	{
		auth = blogCreateAuth
	}
	v := &blog.CreatePayload{}
	if body.Blog != nil {
		v.Blog = marshalBlogRequestBodyToBlogBlog(body.Blog)
	}
	v.Auth = auth

	return v, nil
}

// BuildShowPayload builds the payload for the blog show endpoint from CLI
// flags.
func BuildShowPayload(blogShowID string) (*blog.ShowPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(blogShowID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &blog.ShowPayload{}
	v.ID = id

	return v, nil
}

// BuildRemovePayload builds the payload for the blog remove endpoint from CLI
// flags.
func BuildRemovePayload(blogRemoveID string) (*blog.RemovePayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(blogRemoveID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &blog.RemovePayload{}
	v.ID = id

	return v, nil
}

// BuildAddPayload builds the payload for the blog add endpoint from CLI flags.
func BuildAddPayload(blogAddBody string, blogAddID string) (*blog.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(blogAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"comments\": {\n         \"comment\": \"Iure velit.\",\n         \"id\": 8779553980399303872\n      }\n   }'")
		}
		if body.Comments == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(blogAddID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &blog.AddPayload{}
	if body.Comments != nil {
		v.Comments = marshalCommentRequestBodyToBlogComment(body.Comments)
	}
	v.ID = id

	return v, nil
}
