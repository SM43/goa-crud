// Code generated by goa v3.1.1, DO NOT EDIT.
//
// blog HTTP client types
//
// Command:
// $ goa gen github.com/sm43/goa-crud/design

package client

import (
	blog "github.com/sm43/goa-crud/gen/blog"
	blogviews "github.com/sm43/goa-crud/gen/blog/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "blog" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Adding a new blog
	Blog *BlogRequestBody `form:"blog" json:"blog" xml:"blog"`
}

// AddRequestBody is the type of the "blog" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Comment to be added for a blog
	Comments *CommentRequestBody `form:"comments" json:"comments" xml:"comments"`
}

// ListResponseBody is the type of the "blog" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredBlogResponse

// ShowResponseBody is the type of the "blog" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the blog
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Blog with multiple comments
	Comments []*StoredCommentResponseBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CreateDbErrorResponseBody is the type of the "blog" service "create"
// endpoint HTTP response body for the "db_error" error.
type CreateDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateInvalidTokenResponseBody is the type of the "blog" service "create"
// endpoint HTTP response body for the "invalid-token" error.
type CreateInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListDbErrorResponseBody is the type of the "blog" service "list" endpoint
// HTTP response body for the "db_error" error.
type ListDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowDbErrorResponseBody is the type of the "blog" service "show" endpoint
// HTTP response body for the "db_error" error.
type ShowDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RemoveDbErrorResponseBody is the type of the "blog" service "remove"
// endpoint HTTP response body for the "db_error" error.
type RemoveDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AddDbErrorResponseBody is the type of the "blog" service "add" endpoint HTTP
// response body for the "db_error" error.
type AddDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BlogRequestBody is used to define fields on request body types.
type BlogRequestBody struct {
	// Name of person
	Name string `form:"name" json:"name" xml:"name"`
	// Blog will have multiple comments
	Comments []*CommentRequestBody `form:"comments" json:"comments" xml:"comments"`
}

// CommentRequestBody is used to define fields on request body types.
type CommentRequestBody struct {
	// ID of a comment
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comment string `form:"comment" json:"comment" xml:"comment"`
}

// StoredBlogResponse is used to define fields on response body types.
type StoredBlogResponse struct {
	// ID is the unique id of the blog
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Blog with multiple comments
	Comments []*StoredCommentResponse `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// StoredCommentResponse is used to define fields on response body types.
type StoredCommentResponse struct {
	// ID of a comment
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
}

// StoredCommentResponseBody is used to define fields on response body types.
type StoredCommentResponseBody struct {
	// ID of a comment
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "blog" service.
func NewCreateRequestBody(p *blog.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{}
	if p.Blog != nil {
		body.Blog = marshalBlogBlogToBlogRequestBody(p.Blog)
	}
	return body
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "blog" service.
func NewAddRequestBody(p *blog.AddPayload) *AddRequestBody {
	body := &AddRequestBody{}
	if p.Comments != nil {
		body.Comments = marshalBlogCommentToCommentRequestBody(p.Comments)
	}
	return body
}

// NewCreateDbError builds a blog service create endpoint db_error error.
func NewCreateDbError(body *CreateDbErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateInvalidToken builds a blog service create endpoint invalid-token
// error.
func NewCreateInvalidToken(body *CreateInvalidTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListStoredBlogOK builds a "blog" service "list" endpoint result from a
// HTTP "OK" response.
func NewListStoredBlogOK(body []*StoredBlogResponse) []*blog.StoredBlog {
	v := make([]*blog.StoredBlog, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredBlogResponseToBlogStoredBlog(val)
	}
	return v
}

// NewListDbError builds a blog service list endpoint db_error error.
func NewListDbError(body *ListDbErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowStoredBlogOK builds a "blog" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowStoredBlogOK(body *ShowResponseBody) *blogviews.StoredBlogView {
	v := &blogviews.StoredBlogView{
		ID:   body.ID,
		Name: body.Name,
	}
	v.Comments = make([]*blogviews.StoredCommentView, len(body.Comments))
	for i, val := range body.Comments {
		v.Comments[i] = unmarshalStoredCommentResponseBodyToBlogviewsStoredCommentView(val)
	}

	return v
}

// NewShowDbError builds a blog service show endpoint db_error error.
func NewShowDbError(body *ShowDbErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRemoveDbError builds a blog service remove endpoint db_error error.
func NewRemoveDbError(body *RemoveDbErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAddDbError builds a blog service add endpoint db_error error.
func NewAddDbError(body *AddDbErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateDbErrorResponseBody runs the validations defined on
// create_db_error_response_body
func ValidateCreateDbErrorResponseBody(body *CreateDbErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateInvalidTokenResponseBody runs the validations defined on
// create_invalid-token_response_body
func ValidateCreateInvalidTokenResponseBody(body *CreateInvalidTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListDbErrorResponseBody runs the validations defined on
// list_db_error_response_body
func ValidateListDbErrorResponseBody(body *ListDbErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowDbErrorResponseBody runs the validations defined on
// show_db_error_response_body
func ValidateShowDbErrorResponseBody(body *ShowDbErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRemoveDbErrorResponseBody runs the validations defined on
// remove_db_error_response_body
func ValidateRemoveDbErrorResponseBody(body *RemoveDbErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAddDbErrorResponseBody runs the validations defined on
// add_db_error_response_body
func ValidateAddDbErrorResponseBody(body *AddDbErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBlogRequestBody runs the validations defined on BlogRequestBody
func ValidateBlogRequestBody(body *BlogRequestBody) (err error) {
	if body.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
	}
	return
}

// ValidateStoredBlogResponse runs the validations defined on StoredBlogResponse
func ValidateStoredBlogResponse(body *StoredBlogResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
	}
	for _, e := range body.Comments {
		if e != nil {
			if err2 := ValidateStoredCommentResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredCommentResponse runs the validations defined on
// StoredCommentResponse
func ValidateStoredCommentResponse(body *StoredCommentResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Comment == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comment", "body"))
	}
	return
}

// ValidateStoredCommentResponseBody runs the validations defined on
// StoredCommentResponseBody
func ValidateStoredCommentResponseBody(body *StoredCommentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Comment == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comment", "body"))
	}
	return
}
