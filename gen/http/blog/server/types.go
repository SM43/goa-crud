// Code generated by goa v3.1.1, DO NOT EDIT.
//
// blog HTTP server types
//
// Command:
// $ goa gen github.com/sm43/goa-crud/design

package server

import (
	blog "github.com/sm43/goa-crud/gen/blog"
	blogviews "github.com/sm43/goa-crud/gen/blog/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "blog" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Adding a new blog
	Blog *BlogRequestBody `form:"blog,omitempty" json:"blog,omitempty" xml:"blog,omitempty"`
}

// AddRequestBody is the type of the "blog" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Comment to be added for a blog
	Comments *CommentRequestBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// ListResponseBody is the type of the "blog" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredBlogResponse

// ShowResponseBody is the type of the "blog" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the blog
	ID uint `form:"id" json:"id" xml:"id"`
	// Name of person
	Name string `form:"name" json:"name" xml:"name"`
	// Blog with multiple comments
	Comments []*StoredCommentResponseBody `form:"comments" json:"comments" xml:"comments"`
}

// CreateDbErrorResponseBody is the type of the "blog" service "create"
// endpoint HTTP response body for the "db_error" error.
type CreateDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInvalidTokenResponseBody is the type of the "blog" service "create"
// endpoint HTTP response body for the "invalid-token" error.
type CreateInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListDbErrorResponseBody is the type of the "blog" service "list" endpoint
// HTTP response body for the "db_error" error.
type ListDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowDbErrorResponseBody is the type of the "blog" service "show" endpoint
// HTTP response body for the "db_error" error.
type ShowDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RemoveDbErrorResponseBody is the type of the "blog" service "remove"
// endpoint HTTP response body for the "db_error" error.
type RemoveDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddDbErrorResponseBody is the type of the "blog" service "add" endpoint HTTP
// response body for the "db_error" error.
type AddDbErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StoredBlogResponse is used to define fields on response body types.
type StoredBlogResponse struct {
	// ID is the unique id of the blog
	ID uint `form:"id" json:"id" xml:"id"`
	// Name of person
	Name string `form:"name" json:"name" xml:"name"`
	// Blog with multiple comments
	Comments []*StoredCommentResponse `form:"comments" json:"comments" xml:"comments"`
}

// StoredCommentResponse is used to define fields on response body types.
type StoredCommentResponse struct {
	// ID of a comment
	ID uint `form:"id" json:"id" xml:"id"`
	// Comment for the blog
	Comment string `form:"comment" json:"comment" xml:"comment"`
}

// StoredCommentResponseBody is used to define fields on response body types.
type StoredCommentResponseBody struct {
	// ID of a comment
	ID uint `form:"id" json:"id" xml:"id"`
	// Comment for the blog
	Comment string `form:"comment" json:"comment" xml:"comment"`
}

// BlogRequestBody is used to define fields on request body types.
type BlogRequestBody struct {
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Blog will have multiple comments
	Comments []*CommentRequestBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CommentRequestBody is used to define fields on request body types.
type CommentRequestBody struct {
	// ID of a comment
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "blog" service.
func NewListResponseBody(res []*blog.StoredBlog) ListResponseBody {
	body := make([]*StoredBlogResponse, len(res))
	for i, val := range res {
		body[i] = marshalBlogStoredBlogToStoredBlogResponse(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "blog" service.
func NewShowResponseBody(res *blogviews.StoredBlogView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:   *res.ID,
		Name: *res.Name,
	}
	if res.Comments != nil {
		body.Comments = make([]*StoredCommentResponseBody, len(res.Comments))
		for i, val := range res.Comments {
			body.Comments[i] = marshalBlogviewsStoredCommentViewToStoredCommentResponseBody(val)
		}
	}
	return body
}

// NewCreateDbErrorResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "blog" service.
func NewCreateDbErrorResponseBody(res *goa.ServiceError) *CreateDbErrorResponseBody {
	body := &CreateDbErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInvalidTokenResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "blog" service.
func NewCreateInvalidTokenResponseBody(res *goa.ServiceError) *CreateInvalidTokenResponseBody {
	body := &CreateInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListDbErrorResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "blog" service.
func NewListDbErrorResponseBody(res *goa.ServiceError) *ListDbErrorResponseBody {
	body := &ListDbErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowDbErrorResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "blog" service.
func NewShowDbErrorResponseBody(res *goa.ServiceError) *ShowDbErrorResponseBody {
	body := &ShowDbErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRemoveDbErrorResponseBody builds the HTTP response body from the result
// of the "remove" endpoint of the "blog" service.
func NewRemoveDbErrorResponseBody(res *goa.ServiceError) *RemoveDbErrorResponseBody {
	body := &RemoveDbErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddDbErrorResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "blog" service.
func NewAddDbErrorResponseBody(res *goa.ServiceError) *AddDbErrorResponseBody {
	body := &AddDbErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePayload builds a blog service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, auth string) *blog.CreatePayload {
	v := &blog.CreatePayload{}
	v.Blog = unmarshalBlogRequestBodyToBlogBlog(body.Blog)
	v.Auth = auth

	return v
}

// NewShowPayload builds a blog service show endpoint payload.
func NewShowPayload(id uint) *blog.ShowPayload {
	v := &blog.ShowPayload{}
	v.ID = id

	return v
}

// NewRemovePayload builds a blog service remove endpoint payload.
func NewRemovePayload(id uint) *blog.RemovePayload {
	v := &blog.RemovePayload{}
	v.ID = id

	return v
}

// NewAddPayload builds a blog service add endpoint payload.
func NewAddPayload(body *AddRequestBody, id uint) *blog.AddPayload {
	v := &blog.AddPayload{}
	v.Comments = unmarshalCommentRequestBodyToBlogComment(body.Comments)
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Blog == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("blog", "body"))
	}
	if body.Blog != nil {
		if err2 := ValidateBlogRequestBody(body.Blog); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
	}
	if body.Comments != nil {
		if err2 := ValidateCommentRequestBody(body.Comments); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBlogRequestBody runs the validations defined on BlogRequestBody
func ValidateBlogRequestBody(body *BlogRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
	}
	for _, e := range body.Comments {
		if e != nil {
			if err2 := ValidateCommentRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCommentRequestBody runs the validations defined on CommentRequestBody
func ValidateCommentRequestBody(body *CommentRequestBody) (err error) {
	if body.Comment == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comment", "body"))
	}
	return
}
