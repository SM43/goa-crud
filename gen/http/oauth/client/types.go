// Code generated by goa v3.1.1, DO NOT EDIT.
//
// oauth HTTP client types
//
// Command:
// $ goa gen github.com/sm43/goa-crud/design

package client

import (
	oauth "github.com/sm43/goa-crud/gen/oauth"
	goa "goa.design/goa/v3/pkg"
)

// OauthRequestBody is the type of the "oauth" service "oauth" endpoint HTTP
// request body.
type OauthRequestBody struct {
	// Access github token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// OauthInternalErrorResponseBody is the type of the "oauth" service "oauth"
// endpoint HTTP response body for the "internal_error" error.
type OauthInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewOauthRequestBody builds the HTTP request body from the payload of the
// "oauth" endpoint of the "oauth" service.
func NewOauthRequestBody(p *oauth.OauthPayload) *OauthRequestBody {
	body := &OauthRequestBody{
		Token: p.Token,
	}
	return body
}

// NewOauthInternalError builds a oauth service oauth endpoint internal_error
// error.
func NewOauthInternalError(body *OauthInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateOauthInternalErrorResponseBody runs the validations defined on
// oauth_internal_error_response_body
func ValidateOauthInternalErrorResponseBody(body *OauthInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
