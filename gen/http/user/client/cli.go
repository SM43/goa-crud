// Code generated by goa v3.1.1, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sm43/goa-crud/design

package client

import (
	"encoding/json"
	"fmt"

	user "github.com/sm43/goa-crud/gen/user"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the user create endpoint from CLI
// flags.
func BuildCreatePayload(userCreateBody string, userCreateAuth string) (*user.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(userCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"user\": {\n         \"age\": 2340686031751127884,\n         \"class\": \"Minus soluta aut dolorum fuga.\",\n         \"id\": 9607508899083994649,\n         \"name\": \"Provident perspiciatis accusamus vel nam.\"\n      }\n   }'")
		}
		if body.User == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var auth string
	{
		auth = userCreateAuth
	}
	v := &user.CreatePayload{}
	if body.User != nil {
		v.User = marshalUserRequestBodyToUserUser(body.User)
	}
	v.Auth = auth

	return v, nil
}
