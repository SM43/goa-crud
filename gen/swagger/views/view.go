// Code generated by goa v3.1.1, DO NOT EDIT.
//
// swagger views
//
// Command:
// $ goa gen github.com/sm43/goa-crud/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Resource is the viewed result type that is projected based on a view.
type Resource struct {
	// Type to project
	Projected *ResourceView
	// View to render
	View string
}

// ResourceView is a type that runs validations on a projected type.
type ResourceView struct {
	// ID is the unique id of the resource
	ID *uint
	// Name of the resource
	Name *string
	// Type of resource
	Type *string
	// Rating of resource
	Rating *uint
}

var (
	// ResourceMap is a map of attribute names in result type Resource indexed by
	// view name.
	ResourceMap = map[string][]string{
		"extended": []string{
			"id",
			"name",
		},
		"desc": []string{
			"id",
			"name",
			"rating",
		},
		"default": []string{
			"id",
			"name",
			"type",
			"rating",
		},
	}
)

// ValidateResource runs the validations defined on the viewed result type
// Resource.
func ValidateResource(result *Resource) (err error) {
	switch result.View {
	case "extended":
		err = ValidateResourceViewExtended(result.Projected)
	case "desc":
		err = ValidateResourceViewDesc(result.Projected)
	case "default", "":
		err = ValidateResourceView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"extended", "desc", "default"})
	}
	return
}

// ValidateResourceViewExtended runs the validations defined on ResourceView
// using the "extended" view.
func ValidateResourceViewExtended(result *ResourceView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateResourceViewDesc runs the validations defined on ResourceView using
// the "desc" view.
func ValidateResourceViewDesc(result *ResourceView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "result"))
	}
	return
}

// ValidateResourceView runs the validations defined on ResourceView using the
// "default" view.
func ValidateResourceView(result *ResourceView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "result"))
	}
	return
}
