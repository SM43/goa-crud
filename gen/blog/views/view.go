// Code generated by goa v3.1.1, DO NOT EDIT.
//
// blog views
//
// Command:
// $ goa gen github.com/sm43/goa-crud/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StoredBlog is the viewed result type that is projected based on a view.
type StoredBlog struct {
	// Type to project
	Projected *StoredBlogView
	// View to render
	View string
}

// StoredBlogView is a type that runs validations on a projected type.
type StoredBlogView struct {
	// ID is the unique id of the blog
	ID *uint
	// Name of person
	Name *string
	// Blog with multiple comments
	Comments []*StoredCommentView
}

// StoredCommentView is a type that runs validations on a projected type.
type StoredCommentView struct {
	// ID of a comment
	ID *uint
	// Comment for the blog
	Comment *string
}

var (
	// StoredBlogMap is a map of attribute names in result type StoredBlog indexed
	// by view name.
	StoredBlogMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"comments",
		},
	}
)

// ValidateStoredBlog runs the validations defined on the viewed result type
// StoredBlog.
func ValidateStoredBlog(result *StoredBlog) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredBlogView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredBlogView runs the validations defined on StoredBlogView using
// the "default" view.
func ValidateStoredBlogView(result *StoredBlogView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "result"))
	}
	for _, e := range result.Comments {
		if e != nil {
			if err2 := ValidateStoredCommentView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredCommentView runs the validations defined on StoredCommentView.
func ValidateStoredCommentView(result *StoredCommentView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Comment == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comment", "result"))
	}
	return
}
